{"version":3,"sources":["../../src/downloader/util.js"],"names":["fs","require","request","sudPath","filename","partialPath","index","isSudPath","test","createRequest","url","requestOptions","Observable","create","observer","req","on","data","next","error","complete","abort","getLocalFilesize","existsSync","statSync","size","calculateRanges","filesize","threads","ranges","Array","partitionSize","Math","floor","i","toRangeHeader","range","position","start","end","getRangeHeaders","savePath","map","fsReadFile","readFile","fsAppendFile","appendFile","fsUnlink","unlink","rebuildFiles","meta","sudFile","notCompleted","some","abs","unlinkSync","length","pipe","partialFile","partialData","getInitialDownloadProgressInfo","time","Date","now","elapsed","eta","total","downloaded","percentage","instance","speed","avgSpeed","threadPositions","getThreadIndexFromPosition","threadPosition","findIndex","initialiseDownloaded","reduce","calculateDownloadProgressInfo","prev","initialDownloadProgressInfo","downloadProgressInfo","prevDownloadProgressInfo","currentTimestamp","deltaTime","newElapsed","threadIndex","deltaDownloaded","newDownloaded","newInstanceDownloaded","newPercentage","newInstancePercentage","newSpeed","newEta","newDownloadProgressInfo","killFiles","JSON","parse","readFileSync"],"mappings":"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","sourcesContent":["const fs = require('graceful-fs')\nconst request = require('request')\nimport { Observable, range, bindNodeCallback, of, throwError } from 'rxjs'\nimport { map, concatMap, ignoreElements, concat } from 'rxjs/operators'\n\nexport const sudPath = filename => filename + '.sud'\nexport const partialPath = (filename, index) => `${filename}.${index}.PARTIAL` \nexport const isSudPath = filename => /.sud$/.test(filename)\n\nexport function createRequest(url, requestOptions) {\n\treturn Observable.create(observer => {\n\t\tconst req = request(url, requestOptions)\n\t\t\t.on('data', data => observer.next(data))\n\t\t\t.on('error', error => observer.error(error))\n\t\t\t.on('complete', () => observer.complete())\n\n\t\t//clean up function called when unsubscribed\n\t\treturn () => req.abort()\n\t})\n}\n\nexport const getLocalFilesize = filename => fs.existsSync(filename) ? fs.statSync(filename).size : 0\n\n//takes a file size and the number of partial files (threads) to be used\n//and calculates the ranges in bytes for each thread\nexport function calculateRanges(filesize, threads) {\n\tvar ranges = new Array(threads)\n\n\tif(threads == 1) {\n\t\tranges = [[0, filesize]]\n\t} else {\n\t\tvar partitionSize = Math.floor(filesize / threads)\n\t\tranges[0] = [0, partitionSize]\n\t\tfor(var i = 1; i < threads - 1; i++) {\n\t\t\tranges[i] = [(partitionSize * i) + 1, partitionSize * (i + 1)]\n\t\t}\n\t\tranges[threads - 1] = [ranges[threads - 2][1] + 1, filesize]\n\t}\n\n\treturn ranges\n}\n\n//position in this context starts counting at 0, i.e. the size of the .PARTIAL file\nexport function toRangeHeader(range, position) {\n\tvar start = range[0] + position\n\tvar end = range[1]\n\treturn `bytes=${start}-${end}`\n}\n\nexport function getRangeHeaders(savePath, ranges) {\n\treturn ranges.map((range, index) => {\n\t\tvar position = getLocalFilesize(partialPath(savePath, index))\n\t\treturn range[0] + position >= range[1] ? 0 : toRangeHeader(range, position)\n\t})\n}\n\n\nexport const fsReadFile = bindNodeCallback(fs.readFile)\nconst fsAppendFile = bindNodeCallback(fs.appendFile)\nconst fsUnlink = bindNodeCallback(fs.unlink)\n\n//concatenates all .PARTIAL files and renames the resulting file\n//cleans up by deleting .PARTIAL files and .sud meta data file\nexport function rebuildFiles(meta) {\n\tvar { savePath, ranges } = meta\n\n\tvar sudFile = sudPath(savePath)\n\n\t//check if the files actually need to be rebuilded\n\t//if each partial file is complete, the file size in bytes add the range lower bound should\n\t//differ from the range upper bound by no more than 1 byte (this only occurs for the first partial file\n\t//as it starts at 0)\n\tvar notCompleted = ranges.some((range, index) => Math.abs(range[0] + getLocalFilesize(partialPath(savePath, index)) - range[1]) > 1)\n\tif(notCompleted) throwError('REBUILD ERROR: INCORRECT PARTIAL FILE SIZEZ')\n\n\t//if an entity at the save path already exists, delete it\n\t//the user should be responsbile for ensuring this does not happen if they do not want it to\n\tif(fs.existsSync(savePath)) fs.unlinkSync(savePath)\n\n\treturn range(0, ranges.length).pipe(\n\t\tmap(index => partialPath(savePath, index)),\n\t\t//transform each partial file name into an observable that when subscribed to appends data to\n\t\t//the save file and deletes it\n\t\t//concatMap ensures this is done in order\n\t\tconcatMap(partialFile => \n\t\t\tof(partialFile).pipe(\n\t\t\t\tconcatMap(partialFile => fsReadFile(partialFile)),\n\t\t\t\tconcatMap(partialData => fsAppendFile(savePath, partialData)),\n\t\t\t\tconcatMap(() => fsUnlink(partialFile))\n\t\t\t)\n\t\t),\n\t\tconcat(fsUnlink(sudFile)),\n\t\t//we don't care about the output, we just wanted to perform the actions\n\t\t//and put them in observables so the observable chain isn't interrupted\n\t\tignoreElements()\n\t)\n\n}\n\nexport const getInitialDownloadProgressInfo = meta => {\n\treturn {\n\t\ttime: {\n\t\t\tstart: Date.now(), //timestamp\n\t\t\telapsed: 0, //milliseconds\n\t\t\teta: 0 //seconds\n\t\t},\n\t\t//bytes\n\t\ttotal: {\n\t\t\tfilesize: meta.filesize,\n\t\t\tdownloaded: 0,\n\t\t\tpercentage: 0\n\t\t},\n\t\tinstance: {\n\t\t\tdownloaded: 0,\n\t\t\tpercentage: 0\n\t\t},\n\t\t//bytes per second\n\t\tspeed: 0,\n\t\tavgSpeed: 0,\n\t\t//[bytes]\n\t\tthreadPositions: meta.ranges.map((range, index) => range[0] + getLocalFilesize(partialPath(meta.savePath, index)))\n\t}\n}\n\n//calculates the index of a thread based on its position\nfunction getThreadIndexFromPosition(ranges, threadPosition) {\n\treturn ranges.findIndex(range => threadPosition > range[0] && threadPosition <= range[1] + 1)\n}\n\nfunction initialiseDownloaded(ranges, threadPositions) {\n\treturn threadPositions.reduce((downloaded, threadPosition, index) => {\n\t\treturn downloaded + threadPosition - ranges[index][0]\n\t}, 0)\n}\n\nexport function calculateDownloadProgressInfo(prev, threadPosition) {\n\t//return object of the same form as initialDownloadProgressInfo\n\t//check if the initialDownloadProgressInfo object exists, if it does, use that\n\t//instead of the 'previous' downloadProgressInfo object\n\tvar { meta, initialDownloadProgressInfo, downloadProgressInfo } = prev\n\tvar prevDownloadProgressInfo = initialDownloadProgressInfo || downloadProgressInfo\n\n\tvar { time: { start, elapsed },  total: { filesize, downloaded }, instance, threadPositions } = prevDownloadProgressInfo\n\tvar { ranges } = meta\n\n\t//initialise downloaded if necessary\n\tdownloaded = initialDownloadProgressInfo ? initialiseDownloaded(ranges, threadPositions) : downloaded\n\n\tvar currentTimestamp = Date.now()\n\tvar deltaTime = currentTimestamp - start - elapsed\n\tvar newElapsed = elapsed + deltaTime\n\n\tvar threadIndex = getThreadIndexFromPosition(ranges, threadPosition)\n\n\tvar deltaDownloaded = threadPosition - threadPositions[threadIndex]\n\tvar newDownloaded = downloaded + deltaDownloaded\n\tvar newInstanceDownloaded = instance.downloaded + deltaDownloaded\n\tvar newPercentage = 100 * newDownloaded / filesize\n\tvar newInstancePercentage = 100 * newInstanceDownloaded / filesize\n\n\tvar newSpeed = 1000 * (deltaDownloaded / deltaTime)\n\n\tthreadPositions[threadIndex] = threadPosition\n\n\tvar avgSpeed = 1000 * newInstanceDownloaded / newElapsed\n\tvar newEta = (filesize - newDownloaded) / avgSpeed\n\n\tvar newDownloadProgressInfo = {\n\t\ttime: {\n\t\t\tstart,\n\t\t\telapsed: newElapsed,\n\t\t\teta: newEta\n\t\t},\n\t\ttotal: {\n\t\t\tfilesize,\n\t\t\tdownloaded: newDownloaded,\n\t\t\tpercentage: newPercentage\n\t\t},\n\t\tinstance: {\n\t\t\tdownloaded: newInstanceDownloaded,\n\t\t\tpercentage: newInstancePercentage\n\t\t},\n\t\tspeed: newSpeed,\n\t\tavgSpeed,\n\t\tthreadPositions\n\t}\n\n\treturn newDownloadProgressInfo\n}\n\nexport function killFiles(sudPath) {\n\tif(!fs.existsSync(sudPath)) return false\n\tvar meta = JSON.parse(fs.readFileSync(sudPath))\n\tvar { savePath, ranges } = meta\n\tfor(var index = 0; index < ranges.length; index++) {\n\t\tfs.unlinkSync(partialPath(savePath, index))\n\t}\n\tfs.unlinkSync(sudPath)\n\treturn true\n}"],"file":"util.js"}